import networkx as nx
import matplotlib.pyplot as plt

def kruskal(graph, maxst=False):
    mst = nx.Graph()

    # Ordena las aristas por peso (ascendente para MST, descendente para MAXST)
    edges = sorted(graph.edges(data=True), key=lambda x: x[2]['weight'], reverse=maxst)

    # Un conjunto para cada nodo para rastrear componentes conectados
    node_sets = {node: {node} for node in graph.nodes()}

    for edge in edges:
        u, v, w = edge
        set_u = node_sets[u]
        set_v = node_sets[v]

        if set_u != set_v:
            mst.add_edge(u, v, weight=w)
            set_u.update(set_v)

            # Actualiza los conjuntos de nodos
            for node in set_u:
                node_sets[node] = set_u

    return mst

# Crear un grafo de ejemplo
G = nx.Graph()
G.add_edge('A', 'B', weight=2)
G.add_edge('A', 'C', weight=3)
G.add_edge('B', 'C', weight=1)
G.add_edge('B', 'D', weight=1)
G.add_edge('C', 'D', weight=4)

# Calcular el MST de Kruskal
mst = kruskal(G)

# Calcular el MAXST de Kruskal
maxst = kruskal(G, maxst=True)

# Dibujar el grafo original, el MST y el MAXST
plt.figure(figsize=(12, 4))

plt.subplot(131)
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_size=300, node_color="lightblue")
labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
plt.title("Grafo Original")

plt.subplot(132)
pos = nx.spring_layout(mst)
nx.draw(mst, pos, with_labels=True, node_size=300, node_color="lightblue")
labels = nx.get_edge_attributes(mst, 'weight')
nx.draw_networkx_edge_labels(mst, pos, edge_labels=labels)
plt.title("Árbol de Expansión Mínima (MST)")

plt.subplot(133)
pos = nx.spring_layout(maxst)
nx.draw(maxst, pos, with_labels=True, node_size=300, node_color="lightblue")
labels = nx.get_edge_attributes(maxst, 'weight')
nx.draw_networkx_edge_labels(maxst, pos, edge_labels=labels)
plt.title("Árbol de Expansión Máxima (MAXST)")

plt.tight_layout()
plt.show()
