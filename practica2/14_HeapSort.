def heapify(arr, n, i):
    largest = i  # Inicializar el índice más grande como la raíz
    left = 2 * i + 1  # Calcular el índice del hijo izquierdo
    right = 2 * i + 2  # Calcular el índice del hijo derecho

    # Comprobar si el hijo izquierdo existe y es mayor que la raíz
    if left < n and arr[left] > arr[largest]:
        largest = left

    # Comprobar si el hijo derecho existe y es mayor que la raíz o el hijo izquierdo
    if right < n and arr[right] > arr[largest]:
        largest = right

    # Si el índice más grande no es la raíz, intercambiar raíz y elemento más grande
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # Intercambio
        # Llamar a heapify recursivamente en el subárbol afectado
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)

    # Construir un montículo (heap) máximo
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Extraer elementos uno por uno del montículo
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Intercambio
        heapify(arr, i, 0)

# Ejemplo de uso
arr = [64, 25, 12, 22, 11]
heap_sort(arr)
print("Arreglo ordenado:")
print(arr)
